plugins {
	id 'org.springframework.boot' version '2.2.7.RELEASE'
	id 'io.spring.dependency-management' version '1.0.9.RELEASE'
	id 'java'
	id 'com.palantir.docker' version '0.22.1'
	id "com.google.protobuf" version "0.8.9"
}

version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'
group = 'docker.yulinmei.cn'

repositories {
	//mavenCentral()
	maven { url 'http://maven.aliyun.com/nexus/content/groups/public/' }
	maven{ url 'http://maven.aliyun.com/nexus/content/repositories/jcenter'}
}

ext {
	set('springCloudVersion', "Hoxton.SR4")

	projectname = 'weixinqrcode'
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'


	implementation 'org.springframework.kafka:spring-kafka'
    //implementation('org.springframework.boot:spring-boot-starter-data-redis')

	compile group: 'com.alibaba', name: 'fastjson', version: '1.2.59'
    compile group: 'mysql', name: 'mysql-connector-java', version: '8.0.11'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	implementation("org.springframework.boot:spring-boot-starter-data-jpa")
	compile group: 'net.sf.json-lib', name: 'json-lib', version: '2.4',classifier:"jdk15"
	compile("org.apache.commons:commons-lang3:3.3.2")
	testImplementation 'org.springframework.kafka:spring-kafka-test'

	implementation 'net.devh:grpc-server-spring-boot-starter:2.7.0.RELEASE'
	compile 'io.grpc:grpc-all:1.24.0'


	implementation 'org.springframework.cloud:spring-cloud-starter-config'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	//implementation 'org.springframework.cloud:spring-cloud-starter-consul-config'
	implementation 'org.springframework.cloud:spring-cloud-starter-consul-discovery'


}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}



docker {

	name "$project.group/$project.name:$project.version"
	//tags 'latest'
	dependsOn build
	files jar.archivePath
	//, processResources, bootJar.archivePath, './build/themyscira-openapi-with-aws-extensions.json'

	// 将 bootJar 任务的输出内容，复制到 build/docker/dependency 下
	// build/docker/ 为 Docker 工作目录
	// 后续 Dockerfile 中复制文件时，都相对这个位置进行
	//copySpec.from(tasks.bootJar.outputs.files.singleFile).into("dependency")


	//copySpec.from("secretData/").into("data")
	//files bootJar
	dockerfile file('src/main/docker/Dockerfile')
	buildArgs([BUILD_VERSION: project.version,JAR_FILE: project.name])


}




protobuf {

	generatedFilesBaseDir = "$projectDir/generated"

	protoc {
		artifact = "com.google.protobuf:protoc:3.7.0"
	}
	plugins {
		grpc {
			artifact = "io.grpc:protoc-gen-grpc-java:1.19.0"

		}
	}
	generateProtoTasks {
		all()*.plugins {
			grpc {}
		}
	}


}



test {
	// ...

	// explicitly include or exclude tests
	//include '**'
	exclude '**'

	// ...
}